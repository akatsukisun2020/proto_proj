// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.16.0
// source: tooimage_painter.proto

package tooimage_painter

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DrawMode 绘画模式
type DrawMode int32

const (
	DrawMode_Image2ImageModeDefault    DrawMode = 0 // image2image的普通画图
	DrawMode_Image2ImageModeControlnet DrawMode = 1 // image2image的controlnet模式
)

// Enum value maps for DrawMode.
var (
	DrawMode_name = map[int32]string{
		0: "Image2ImageModeDefault",
		1: "Image2ImageModeControlnet",
	}
	DrawMode_value = map[string]int32{
		"Image2ImageModeDefault":    0,
		"Image2ImageModeControlnet": 1,
	}
)

func (x DrawMode) Enum() *DrawMode {
	p := new(DrawMode)
	*p = x
	return p
}

func (x DrawMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrawMode) Descriptor() protoreflect.EnumDescriptor {
	return file_tooimage_painter_proto_enumTypes[0].Descriptor()
}

func (DrawMode) Type() protoreflect.EnumType {
	return &file_tooimage_painter_proto_enumTypes[0]
}

func (x DrawMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DrawMode.Descriptor instead.
func (DrawMode) EnumDescriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{0}
}

type DrawTaskStatus int32

const (
	DrawTaskStatus_TASKDEFAULT DrawTaskStatus = 0
	DrawTaskStatus_TASKCREATE  DrawTaskStatus = 1 // 任务已经创建(可以被停)
	DrawTaskStatus_TASKRUNNING DrawTaskStatus = 2 // 任务进行中(表示模型正在运行,真的在处理中)(不能被停)
	DrawTaskStatus_TASKSUCESS  DrawTaskStatus = 3 // 任务已完成，后续可以查看已经好的图片. 先做用户体系
	DrawTaskStatus_TASKFAILED  DrawTaskStatus = 4 // 任务失败
)

// Enum value maps for DrawTaskStatus.
var (
	DrawTaskStatus_name = map[int32]string{
		0: "TASKDEFAULT",
		1: "TASKCREATE",
		2: "TASKRUNNING",
		3: "TASKSUCESS",
		4: "TASKFAILED",
	}
	DrawTaskStatus_value = map[string]int32{
		"TASKDEFAULT": 0,
		"TASKCREATE":  1,
		"TASKRUNNING": 2,
		"TASKSUCESS":  3,
		"TASKFAILED":  4,
	}
)

func (x DrawTaskStatus) Enum() *DrawTaskStatus {
	p := new(DrawTaskStatus)
	*p = x
	return p
}

func (x DrawTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrawTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tooimage_painter_proto_enumTypes[1].Descriptor()
}

func (DrawTaskStatus) Type() protoreflect.EnumType {
	return &file_tooimage_painter_proto_enumTypes[1]
}

func (x DrawTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DrawTaskStatus.Descriptor instead.
func (DrawTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{1}
}

type Image2ImageDrawTaskParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitImages            string  `protobuf:"bytes,1,opt,name=init_images,json=initImages,proto3" json:"init_images,omitempty"`                                    // sd图片，base64编码
	Prompt                string  `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`                                                              // 正向语
	DenoisingStrength     float64 `protobuf:"fixed64,3,opt,name=denoising_strength,json=denoisingStrength,proto3" json:"denoising_strength,omitempty"`             // 去噪强度
	Width                 int32   `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`                                                               // 宽
	Height                int32   `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`                                                             // 高
	ControlnetInputImages string  `protobuf:"bytes,6,opt,name=controlnet_input_images,json=controlnetInputImages,proto3" json:"controlnet_input_images,omitempty"` // controlnet输入图片，base64编码
}

func (x *Image2ImageDrawTaskParams) Reset() {
	*x = Image2ImageDrawTaskParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tooimage_painter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image2ImageDrawTaskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image2ImageDrawTaskParams) ProtoMessage() {}

func (x *Image2ImageDrawTaskParams) ProtoReflect() protoreflect.Message {
	mi := &file_tooimage_painter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image2ImageDrawTaskParams.ProtoReflect.Descriptor instead.
func (*Image2ImageDrawTaskParams) Descriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{0}
}

func (x *Image2ImageDrawTaskParams) GetInitImages() string {
	if x != nil {
		return x.InitImages
	}
	return ""
}

func (x *Image2ImageDrawTaskParams) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *Image2ImageDrawTaskParams) GetDenoisingStrength() float64 {
	if x != nil {
		return x.DenoisingStrength
	}
	return 0
}

func (x *Image2ImageDrawTaskParams) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Image2ImageDrawTaskParams) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Image2ImageDrawTaskParams) GetControlnetInputImages() string {
	if x != nil {
		return x.ControlnetInputImages
	}
	return ""
}

// DrawTaskParams 绘画任务参数
type DrawTaskParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode              DrawMode                   `protobuf:"varint,1,opt,name=mode,proto3,enum=tooimagepainter.DrawMode" json:"mode,omitempty"`                     // 使用模式
	Image2ImageParams *Image2ImageDrawTaskParams `protobuf:"bytes,2,opt,name=image2image_params,json=image2imageParams,proto3" json:"image2image_params,omitempty"` // image2image系列的绘图方式的任务参数
}

func (x *DrawTaskParams) Reset() {
	*x = DrawTaskParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tooimage_painter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawTaskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawTaskParams) ProtoMessage() {}

func (x *DrawTaskParams) ProtoReflect() protoreflect.Message {
	mi := &file_tooimage_painter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawTaskParams.ProtoReflect.Descriptor instead.
func (*DrawTaskParams) Descriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{1}
}

func (x *DrawTaskParams) GetMode() DrawMode {
	if x != nil {
		return x.Mode
	}
	return DrawMode_Image2ImageModeDefault
}

func (x *DrawTaskParams) GetImage2ImageParams() *Image2ImageDrawTaskParams {
	if x != nil {
		return x.Image2ImageParams
	}
	return nil
}

type DrawTaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl []string `protobuf:"bytes,1,rep,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"` // 生成的图片地址
}

func (x *DrawTaskResult) Reset() {
	*x = DrawTaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tooimage_painter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawTaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawTaskResult) ProtoMessage() {}

func (x *DrawTaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_tooimage_painter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawTaskResult.ProtoReflect.Descriptor instead.
func (*DrawTaskResult) Descriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{2}
}

func (x *DrawTaskResult) GetImageUrl() []string {
	if x != nil {
		return x.ImageUrl
	}
	return nil
}

// DrawTaskInfo 任务信息
type DrawTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     int64           `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                                 // 任务id   ==> 【重要】长时间没有轮训的任务，直接给他下掉，不要浪费资源了  ==> 或者做个感知（看看grpc是否支持）【用户可能点一下就跑了】
	TaskParam  *DrawTaskParams `protobuf:"bytes,2,opt,name=task_param,json=taskParam,proto3" json:"task_param,omitempty"`                                         // 任务参数
	TaskStatus DrawTaskStatus  `protobuf:"varint,3,opt,name=task_status,json=taskStatus,proto3,enum=tooimagepainter.DrawTaskStatus" json:"task_status,omitempty"` // 任务状态
	TaskResult *DrawTaskResult `protobuf:"bytes,4,opt,name=task_result,json=taskResult,proto3" json:"task_result,omitempty"`                                      // 任务结果
	RetryTimes int32           `protobuf:"varint,5,opt,name=retry_times,json=retryTimes,proto3" json:"retry_times,omitempty"`                                     // 重试次数
}

func (x *DrawTaskInfo) Reset() {
	*x = DrawTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tooimage_painter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawTaskInfo) ProtoMessage() {}

func (x *DrawTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tooimage_painter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawTaskInfo.ProtoReflect.Descriptor instead.
func (*DrawTaskInfo) Descriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{3}
}

func (x *DrawTaskInfo) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *DrawTaskInfo) GetTaskParam() *DrawTaskParams {
	if x != nil {
		return x.TaskParam
	}
	return nil
}

func (x *DrawTaskInfo) GetTaskStatus() DrawTaskStatus {
	if x != nil {
		return x.TaskStatus
	}
	return DrawTaskStatus_TASKDEFAULT
}

func (x *DrawTaskInfo) GetTaskResult() *DrawTaskResult {
	if x != nil {
		return x.TaskResult
	}
	return nil
}

func (x *DrawTaskInfo) GetRetryTimes() int32 {
	if x != nil {
		return x.RetryTimes
	}
	return 0
}

//****************************************** 服务接口结构定义 **********************************************//
type StartDrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户id，单个用户，不能同时存在2个并行任务
	TaskParams *DrawTaskParams `protobuf:"bytes,2,opt,name=task_params,json=taskParams,proto3" json:"task_params,omitempty"` // 任务参数
}

func (x *StartDrawReq) Reset() {
	*x = StartDrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tooimage_painter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDrawReq) ProtoMessage() {}

func (x *StartDrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_tooimage_painter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDrawReq.ProtoReflect.Descriptor instead.
func (*StartDrawReq) Descriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{4}
}

func (x *StartDrawReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StartDrawReq) GetTaskParams() *DrawTaskParams {
	if x != nil {
		return x.TaskParams
	}
	return nil
}

type StartDrawRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32  `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` // 错误吗
	RetMsg  string `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`     // 错误信息
	TaskId  int64  `protobuf:"varint,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`    // 任务id
}

func (x *StartDrawRsp) Reset() {
	*x = StartDrawRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tooimage_painter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDrawRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDrawRsp) ProtoMessage() {}

func (x *StartDrawRsp) ProtoReflect() protoreflect.Message {
	mi := &file_tooimage_painter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDrawRsp.ProtoReflect.Descriptor instead.
func (*StartDrawRsp) Descriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{5}
}

func (x *StartDrawRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *StartDrawRsp) GetRetMsg() string {
	if x != nil {
		return x.RetMsg
	}
	return ""
}

func (x *StartDrawRsp) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

// QueryDrawingReq 查询绘制任务
type QueryDrawingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`  // 用户id，单个用户，不能同时存在2个并行任务
	TaskId int64  `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // 取消任务
}

func (x *QueryDrawingReq) Reset() {
	*x = QueryDrawingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tooimage_painter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDrawingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDrawingReq) ProtoMessage() {}

func (x *QueryDrawingReq) ProtoReflect() protoreflect.Message {
	mi := &file_tooimage_painter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDrawingReq.ProtoReflect.Descriptor instead.
func (*QueryDrawingReq) Descriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{6}
}

func (x *QueryDrawingReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QueryDrawingReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type QueryDrawingRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode  int32           `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`   // 错误吗
	RetMsg   string          `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`       // 错误信息
	TaskInfo []*DrawTaskInfo `protobuf:"bytes,3,rep,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"` // 正在进行的任务，理论上单用户只有一个
}

func (x *QueryDrawingRsp) Reset() {
	*x = QueryDrawingRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tooimage_painter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDrawingRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDrawingRsp) ProtoMessage() {}

func (x *QueryDrawingRsp) ProtoReflect() protoreflect.Message {
	mi := &file_tooimage_painter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDrawingRsp.ProtoReflect.Descriptor instead.
func (*QueryDrawingRsp) Descriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{7}
}

func (x *QueryDrawingRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *QueryDrawingRsp) GetRetMsg() string {
	if x != nil {
		return x.RetMsg
	}
	return ""
}

func (x *QueryDrawingRsp) GetTaskInfo() []*DrawTaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

// 用于以后停止绘画，用户中途取消，避免资源浪费.(如果在队列中，则可以取消，否则取消不了)
type StopDrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`  // 用户id，单个用户，不能同时存在2个并行任务
	TaskId int64  `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // 取消任务
}

func (x *StopDrawReq) Reset() {
	*x = StopDrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tooimage_painter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopDrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDrawReq) ProtoMessage() {}

func (x *StopDrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_tooimage_painter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDrawReq.ProtoReflect.Descriptor instead.
func (*StopDrawReq) Descriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{8}
}

func (x *StopDrawReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StopDrawReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type StopDrawRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32  `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` // 错误吗
	RetMsg  string `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`     // 错误信息
}

func (x *StopDrawRsp) Reset() {
	*x = StopDrawRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tooimage_painter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopDrawRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDrawRsp) ProtoMessage() {}

func (x *StopDrawRsp) ProtoReflect() protoreflect.Message {
	mi := &file_tooimage_painter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDrawRsp.ProtoReflect.Descriptor instead.
func (*StopDrawRsp) Descriptor() ([]byte, []int) {
	return file_tooimage_painter_proto_rawDescGZIP(), []int{9}
}

func (x *StopDrawRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *StopDrawRsp) GetRetMsg() string {
	if x != nil {
		return x.RetMsg
	}
	return ""
}

var File_tooimage_painter_proto protoreflect.FileDescriptor

var file_tooimage_painter_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x19, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x32, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x72, 0x61, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x64, 0x65, 0x6e, 0x6f, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x65, 0x6e, 0x6f,
	0x69, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x44, 0x72, 0x61, 0x77, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x70,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x72, 0x61, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x11, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x32, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x2d, 0x0a, 0x0e, 0x44, 0x72, 0x61, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22,
	0x8c, 0x02, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x72, 0x61, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x69,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44,
	0x72, 0x61, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5b, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x72, 0x61, 0x77, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x3f, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x41, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x72, 0x61, 0x77, 0x52, 0x73, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x2a, 0x45, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x32, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x10, 0x01, 0x2a, 0x62, 0x0a, 0x0e, 0x44, 0x72,
	0x61, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x41, 0x53, 0x4b, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x41, 0x53, 0x4b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x41, 0x53, 0x4b, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x55, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x41, 0x53, 0x4b, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0xf5,
	0x02, 0x0a, 0x0f, 0x54, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x72, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x72, 0x61, 0x77, 0x12,
	0x1d, 0x2e, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x72, 0x61, 0x77, 0x52, 0x73, 0x70, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x72, 0x61, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x72,
	0x61, 0x77, 0x12, 0x1c, 0x2e, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x72, 0x61, 0x77, 0x52, 0x73, 0x70, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x64,
	0x72, 0x61, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x72,
	0x61, 0x77, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x74, 0x6f, 0x6f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x22, 0x1f, 0x2f, 0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x72, 0x61, 0x77,
	0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6b, 0x61, 0x74, 0x73, 0x75, 0x6b, 0x69, 0x73, 0x75, 0x6e,
	0x32, 0x30, 0x32, 0x30, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x2f,
	0x74, 0x6f, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tooimage_painter_proto_rawDescOnce sync.Once
	file_tooimage_painter_proto_rawDescData = file_tooimage_painter_proto_rawDesc
)

func file_tooimage_painter_proto_rawDescGZIP() []byte {
	file_tooimage_painter_proto_rawDescOnce.Do(func() {
		file_tooimage_painter_proto_rawDescData = protoimpl.X.CompressGZIP(file_tooimage_painter_proto_rawDescData)
	})
	return file_tooimage_painter_proto_rawDescData
}

var file_tooimage_painter_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tooimage_painter_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_tooimage_painter_proto_goTypes = []interface{}{
	(DrawMode)(0),                     // 0: tooimagepainter.DrawMode
	(DrawTaskStatus)(0),               // 1: tooimagepainter.DrawTaskStatus
	(*Image2ImageDrawTaskParams)(nil), // 2: tooimagepainter.Image2ImageDrawTaskParams
	(*DrawTaskParams)(nil),            // 3: tooimagepainter.DrawTaskParams
	(*DrawTaskResult)(nil),            // 4: tooimagepainter.DrawTaskResult
	(*DrawTaskInfo)(nil),              // 5: tooimagepainter.DrawTaskInfo
	(*StartDrawReq)(nil),              // 6: tooimagepainter.StartDrawReq
	(*StartDrawRsp)(nil),              // 7: tooimagepainter.StartDrawRsp
	(*QueryDrawingReq)(nil),           // 8: tooimagepainter.QueryDrawingReq
	(*QueryDrawingRsp)(nil),           // 9: tooimagepainter.QueryDrawingRsp
	(*StopDrawReq)(nil),               // 10: tooimagepainter.StopDrawReq
	(*StopDrawRsp)(nil),               // 11: tooimagepainter.StopDrawRsp
}
var file_tooimage_painter_proto_depIdxs = []int32{
	0,  // 0: tooimagepainter.DrawTaskParams.mode:type_name -> tooimagepainter.DrawMode
	2,  // 1: tooimagepainter.DrawTaskParams.image2image_params:type_name -> tooimagepainter.Image2ImageDrawTaskParams
	3,  // 2: tooimagepainter.DrawTaskInfo.task_param:type_name -> tooimagepainter.DrawTaskParams
	1,  // 3: tooimagepainter.DrawTaskInfo.task_status:type_name -> tooimagepainter.DrawTaskStatus
	4,  // 4: tooimagepainter.DrawTaskInfo.task_result:type_name -> tooimagepainter.DrawTaskResult
	3,  // 5: tooimagepainter.StartDrawReq.task_params:type_name -> tooimagepainter.DrawTaskParams
	5,  // 6: tooimagepainter.QueryDrawingRsp.task_info:type_name -> tooimagepainter.DrawTaskInfo
	6,  // 7: tooimagepainter.TooimagePainter.StartDraw:input_type -> tooimagepainter.StartDrawReq
	10, // 8: tooimagepainter.TooimagePainter.StopDraw:input_type -> tooimagepainter.StopDrawReq
	8,  // 9: tooimagepainter.TooimagePainter.QueryDrawing:input_type -> tooimagepainter.QueryDrawingReq
	7,  // 10: tooimagepainter.TooimagePainter.StartDraw:output_type -> tooimagepainter.StartDrawRsp
	11, // 11: tooimagepainter.TooimagePainter.StopDraw:output_type -> tooimagepainter.StopDrawRsp
	9,  // 12: tooimagepainter.TooimagePainter.QueryDrawing:output_type -> tooimagepainter.QueryDrawingRsp
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_tooimage_painter_proto_init() }
func file_tooimage_painter_proto_init() {
	if File_tooimage_painter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tooimage_painter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image2ImageDrawTaskParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tooimage_painter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawTaskParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tooimage_painter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawTaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tooimage_painter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tooimage_painter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tooimage_painter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDrawRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tooimage_painter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDrawingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tooimage_painter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDrawingRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tooimage_painter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopDrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tooimage_painter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopDrawRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tooimage_painter_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tooimage_painter_proto_goTypes,
		DependencyIndexes: file_tooimage_painter_proto_depIdxs,
		EnumInfos:         file_tooimage_painter_proto_enumTypes,
		MessageInfos:      file_tooimage_painter_proto_msgTypes,
	}.Build()
	File_tooimage_painter_proto = out.File
	file_tooimage_painter_proto_rawDesc = nil
	file_tooimage_painter_proto_goTypes = nil
	file_tooimage_painter_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TooimagePainterClient is the client API for TooimagePainter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TooimagePainterClient interface {
	// StartDraw 开始绘画
	StartDraw(ctx context.Context, in *StartDrawReq, opts ...grpc.CallOption) (*StartDrawRsp, error)
	// StopDraw 停止绘画
	StopDraw(ctx context.Context, in *StopDrawReq, opts ...grpc.CallOption) (*StopDrawRsp, error)
	// QueryDrawing 查询当前绘制
	QueryDrawing(ctx context.Context, in *QueryDrawingReq, opts ...grpc.CallOption) (*QueryDrawingRsp, error)
}

type tooimagePainterClient struct {
	cc grpc.ClientConnInterface
}

func NewTooimagePainterClient(cc grpc.ClientConnInterface) TooimagePainterClient {
	return &tooimagePainterClient{cc}
}

func (c *tooimagePainterClient) StartDraw(ctx context.Context, in *StartDrawReq, opts ...grpc.CallOption) (*StartDrawRsp, error) {
	out := new(StartDrawRsp)
	err := c.cc.Invoke(ctx, "/tooimagepainter.TooimagePainter/StartDraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tooimagePainterClient) StopDraw(ctx context.Context, in *StopDrawReq, opts ...grpc.CallOption) (*StopDrawRsp, error) {
	out := new(StopDrawRsp)
	err := c.cc.Invoke(ctx, "/tooimagepainter.TooimagePainter/StopDraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tooimagePainterClient) QueryDrawing(ctx context.Context, in *QueryDrawingReq, opts ...grpc.CallOption) (*QueryDrawingRsp, error) {
	out := new(QueryDrawingRsp)
	err := c.cc.Invoke(ctx, "/tooimagepainter.TooimagePainter/QueryDrawing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TooimagePainterServer is the server API for TooimagePainter service.
type TooimagePainterServer interface {
	// StartDraw 开始绘画
	StartDraw(context.Context, *StartDrawReq) (*StartDrawRsp, error)
	// StopDraw 停止绘画
	StopDraw(context.Context, *StopDrawReq) (*StopDrawRsp, error)
	// QueryDrawing 查询当前绘制
	QueryDrawing(context.Context, *QueryDrawingReq) (*QueryDrawingRsp, error)
}

// UnimplementedTooimagePainterServer can be embedded to have forward compatible implementations.
type UnimplementedTooimagePainterServer struct {
}

func (*UnimplementedTooimagePainterServer) StartDraw(context.Context, *StartDrawReq) (*StartDrawRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDraw not implemented")
}
func (*UnimplementedTooimagePainterServer) StopDraw(context.Context, *StopDrawReq) (*StopDrawRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDraw not implemented")
}
func (*UnimplementedTooimagePainterServer) QueryDrawing(context.Context, *QueryDrawingReq) (*QueryDrawingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDrawing not implemented")
}

func RegisterTooimagePainterServer(s *grpc.Server, srv TooimagePainterServer) {
	s.RegisterService(&_TooimagePainter_serviceDesc, srv)
}

func _TooimagePainter_StartDraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TooimagePainterServer).StartDraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tooimagepainter.TooimagePainter/StartDraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TooimagePainterServer).StartDraw(ctx, req.(*StartDrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TooimagePainter_StopDraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TooimagePainterServer).StopDraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tooimagepainter.TooimagePainter/StopDraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TooimagePainterServer).StopDraw(ctx, req.(*StopDrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TooimagePainter_QueryDrawing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDrawingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TooimagePainterServer).QueryDrawing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tooimagepainter.TooimagePainter/QueryDrawing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TooimagePainterServer).QueryDrawing(ctx, req.(*QueryDrawingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TooimagePainter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tooimagepainter.TooimagePainter",
	HandlerType: (*TooimagePainterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDraw",
			Handler:    _TooimagePainter_StartDraw_Handler,
		},
		{
			MethodName: "StopDraw",
			Handler:    _TooimagePainter_StopDraw_Handler,
		},
		{
			MethodName: "QueryDrawing",
			Handler:    _TooimagePainter_QueryDrawing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tooimage_painter.proto",
}
