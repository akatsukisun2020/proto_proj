syntax = "proto3";

package tooimagepainter;
option go_package="github.com/akatsukisun2020/proto_proj/tooimage_painter";

import "google/api/annotations.proto";  // http协议必须要引入的文件

// ==> 部分想法：
// 写代码考虑：（1）用户发起任务之后就跑了 （2）用户跑了之后，又进来了？ ==> 怎么减少别人的等待
// 跑了就不给她生成还是 给他生成
// 回来之后，如果生成了，是否要通知给他？ 列表形式

//****************************************** 图片上传公共结构定义 **********************************************//

// 上传图片，类似redis中的zset, key: user_id, score: uploadtime(秒)
message ImageUploadItem {
    string image_url = 1;   // 格式限制？只支持png？？到时候测试一下（todo） 
    string file_name = 2;   // 用于删除操作的文件名
    // int64 upload_time = 2;  // 上传时间(单位s)
}

//****************************************** 任务公共结构定义 **********************************************//

// DrawMode 绘画模式
enum DrawMode {
    Image2ImageModeDefault = 0;                          // image2image的普通画图
    Image2ImageModeControlnet = 1;                       // image2image的controlnet模式
}

message Image2ImageDrawTaskParams {
    // string init_images = 1;                // sd图片，base64编码
    string init_image_url = 1;                // 输入图片地址(公网地址) fixme:所有的图片都通过公网传输
    string prompt = 2;                        // 正向语
    double denoising_strength = 3;            // 去噪强度
    int32 width = 4;                          // 宽
    int32 height = 5;                         // 高
    // string controlnet_input_images = 6;       // controlnet输入图片，base64编码
    string controlnet_input_images_url = 6;   // controlnet图片地址(公网地址)
}

// DrawTaskParams 绘画任务参数
message DrawTaskParams {
    DrawMode mode = 1;                                   // 使用模式
    Image2ImageDrawTaskParams image2image_params = 2;    // image2image系列的绘图方式的任务参数
}

enum DrawTaskStatus {
    TASKDEFAULT = 0;
    TASKCREATE = 1;     // 任务已经创建(可以被停)
    TASKRUNNING = 2;    // 任务进行中(表示模型正在运行,真的在处理中)(不能被停) ==> 不能被重入
    TASKRETRY = 3;      // 任务重试中
    TASKSUCESS = 4;     // 任务已完成，后续可以查看已经好的图片. 先做用户体系
    TASKFAILED = 5;     // 任务失败
    TASKDELETE = 6;     // 任务被删除了
}

message DrawTaskResult {
    repeated string image_url = 1;  // 生成的图片地址(公网地址)
}

message DrawTaskExecCtx {
    int32 retry_times = 1;                    // 重试次数
    string gpu_host = 2;                      // 运行的gpu  
    int64 update_time = 3;                    // 更新时间（秒），用来跟踪任务变更时间
}

// DrawTaskInfo 任务信息
message DrawTaskInfo {
    int64 task_id = 1;                        // 任务id   ==> 【重要】长时间没有轮训的任务，直接给他下掉，不要浪费资源了  ==> 或者做个感知（看看grpc是否支持）【用户可能点一下就跑了】
    DrawTaskParams task_param = 2;            // 任务参数
    DrawTaskStatus task_status = 3;           // 任务状态
    DrawTaskExecCtx task_exec_ctx = 4;        // 任务运行上下文
    DrawTaskResult task_result = 5;           // 任务结果
}

//****************************************** 服务接口结构定义 **********************************************//
message StartDrawReq {
    string user_id = 1;                       // 用户id，单个用户，不能同时存在2个并行任务
    DrawTaskParams task_params = 2;           // 任务参数
}

message StartDrawRsp {
    int32 ret_code = 1;                       // 错误吗
    string ret_msg = 2;                       // 错误信息
    int64 task_id = 3;                       // 任务id
}


// QueryDrawingReq 查询绘制任务
message QueryDrawingReq {
    string user_id = 1;                       // 用户id，单个用户，不能同时存在2个并行任务
    int64 task_id = 2;                       // 取消任务
}

message QueryDrawingRsp {
    int32 ret_code = 1;                       // 错误吗
    string ret_msg = 2;                       // 错误信息
    repeated DrawTaskInfo task_info = 3;      // 正在进行的任务，理论上单用户只有一个
    int32 ranks = 4;                          // 排队数(粗略统计值) 
}

message QueryUserHistoryDrawImagesReq {
    string user_id = 1; 
    // 分页以后在做 
}

message QueryUserHistoryDrawImagesRsp {
    int32 ret_code = 1;                       // 错误吗
    string ret_msg = 2;                       // 错误信息
    repeated string image_url_list = 3;  
}

// 用于以后停止绘画，用户中途取消，避免资源浪费.(如果在队列中，则可以取消，否则取消不了)
message StopDrawReq {
    string user_id = 1;                       // 用户id，单个用户，不能同时存在2个并行任务
    int64 task_id = 2;                       // 取消任务
}

message StopDrawRsp {
    int32 ret_code = 1;                       // 错误吗
    string ret_msg = 2;                       // 错误信息
}

// TODO: 到时候测试一下，是否前端可能抓取登录态，然后自己筛用户user_id过来==> 是否需要做校验？【很中哟啊】
message UploadImageReq {
    string user_id = 1;      // 用户id 
    string image_data = 2;   // 图片数据(base64编码)  ==> 上传频率10s长传一个，一天最多上传1000张
}

message UploadImageRsp {
    int32 ret_code = 1;                       // 错误吗
    string ret_msg = 2;                       // 错误信息
    string image_url = 3;                     // 图片链接
}

// 查询用户可用上传图片地址
message QueryUploadImageListReq{
    string user_id = 1;      // 用户id 
}

message QueryUploadImageListRsp{
    int32 ret_code = 1;                       // 错误吗
    string ret_msg = 2;                       // 错误信息
    repeated ImageUploadItem image_list = 3;  // tudo：这个需要针对 s3中设置的过期，进行判别，防止过期的图片漏出
}

// TooimagePainter tooimage绘画器
service TooimagePainter {
    // StartDraw 开始绘画
    rpc StartDraw(StartDrawReq) returns (StartDrawRsp){
		option (google.api.http) = {
			post: "/tooimage_painter/start_draw"
            body: "*"
		};
	}

    // StopDraw 停止绘画
    rpc StopDraw(StopDrawReq) returns (StopDrawRsp){
        option (google.api.http) = {
            post: "/tooimage_painter/stop_draw"
            body: "*"
        };
    }

    // QueryDrawing 查询当前绘制
    rpc QueryDrawing (QueryDrawingReq) returns (QueryDrawingRsp){
		option (google.api.http) = {
			post: "/tooimage_painter/query_drawing"
            body: "*"
		};
	}

    
    // QueryUserHistoryDrawImages 查询当前用户生成的绘画图片列表 
    rpc QueryUserHistoryDrawImages  (QueryUserHistoryDrawImagesReq) returns (QueryUserHistoryDrawImagesRsp){
        option (google.api.http) = {
            post: "/tooimage_painter/query_user_history_draw_images"
            body: "*"
        };
    }

    // QueryUploadImageList 查询用户上传图片列表
    rpc QueryUploadImageList (QueryUploadImageListReq) returns (QueryUploadImageListRsp){
        option (google.api.http) = {
            post: "/tooimage_painter/query_upload_image_list"
            body: "*"
        };
    }

    // UploadImage 上传图片
    rpc UploadImage (UploadImageReq) returns (UploadImageRsp){
        option (google.api.http) = {
            post: "/tooimage_painter/upload_image"
            body: "*"
        };
    }
}



