// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.16.0
// source: stable_diffusion_proxy.proto

package stable_diffusion_proxy

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OverrideSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OverrideSettings) Reset() {
	*x = OverrideSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stable_diffusion_proxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideSettings) ProtoMessage() {}

func (x *OverrideSettings) ProtoReflect() protoreflect.Message {
	mi := &file_stable_diffusion_proxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideSettings.ProtoReflect.Descriptor instead.
func (*OverrideSettings) Descriptor() ([]byte, []int) {
	return file_stable_diffusion_proxy_proto_rawDescGZIP(), []int{0}
}

type ControlnetImg2ImgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitImages                        []string          `protobuf:"bytes,1,rep,name=init_images,json=initImages,proto3" json:"init_images,omitempty"` // 初始图片
	Mark                              string            `protobuf:"bytes,2,opt,name=mark,proto3" json:"mark,omitempty"`
	MaskBlur                          int32             `protobuf:"varint,3,opt,name=mask_blur,json=maskBlur,proto3" json:"mask_blur,omitempty"`
	InpaintingFill                    int32             `protobuf:"varint,4,opt,name=inpainting_fill,json=inpaintingFill,proto3" json:"inpainting_fill,omitempty"`
	InpaintFullRes                    bool              `protobuf:"varint,5,opt,name=inpaint_full_res,json=inpaintFullRes,proto3" json:"inpaint_full_res,omitempty"`
	InpaintFullResPadding             int32             `protobuf:"varint,6,opt,name=inpaint_full_res_padding,json=inpaintFullResPadding,proto3" json:"inpaint_full_res_padding,omitempty"`
	InpaintingMaskInvert              int32             `protobuf:"varint,7,opt,name=inpainting_mask_invert,json=inpaintingMaskInvert,proto3" json:"inpainting_mask_invert,omitempty"`
	ResizeMode                        int32             `protobuf:"varint,8,opt,name=resize_mode,json=resizeMode,proto3" json:"resize_mode,omitempty"` // 可能是枚举
	DenoisingStrength                 float64           `protobuf:"fixed64,9,opt,name=denoising_strength,json=denoisingStrength,proto3" json:"denoising_strength,omitempty"`
	Prompt                            string            `protobuf:"bytes,10,opt,name=prompt,proto3" json:"prompt,omitempty"`
	NegativePrompt                    string            `protobuf:"bytes,11,opt,name=negative_prompt,json=negativePrompt,proto3" json:"negative_prompt,omitempty"`
	ControlnetInputImage              []string          `protobuf:"bytes,12,rep,name=controlnet_input_image,json=controlnetInputImage,proto3" json:"controlnet_input_image,omitempty"`
	ControlnetMask                    []string          `protobuf:"bytes,13,rep,name=controlnet_mask,json=controlnetMask,proto3" json:"controlnet_mask,omitempty"`
	ControlnetModule                  string            `protobuf:"bytes,14,opt,name=controlnet_module,json=controlnetModule,proto3" json:"controlnet_module,omitempty"`
	ControlnetModel                   string            `protobuf:"bytes,15,opt,name=controlnet_model,json=controlnetModel,proto3" json:"controlnet_model,omitempty"`
	ControlnetWeight                  float64           `protobuf:"fixed64,16,opt,name=controlnet_weight,json=controlnetWeight,proto3" json:"controlnet_weight,omitempty"`
	ControlnetResizeMode              string            `protobuf:"bytes,17,opt,name=controlnet_resize_mode,json=controlnetResizeMode,proto3" json:"controlnet_resize_mode,omitempty"`
	ControlnetLowvram                 bool              `protobuf:"varint,18,opt,name=controlnet_lowvram,json=controlnetLowvram,proto3" json:"controlnet_lowvram,omitempty"`
	ControlnetProcessorRes            int32             `protobuf:"varint,19,opt,name=controlnet_processor_res,json=controlnetProcessorRes,proto3" json:"controlnet_processor_res,omitempty"`
	ControlnetThresholdA              int32             `protobuf:"varint,20,opt,name=controlnet_threshold_a,json=controlnetThresholdA,proto3" json:"controlnet_threshold_a,omitempty"`
	ControlnetThresholdB              int32             `protobuf:"varint,21,opt,name=controlnet_threshold_b,json=controlnetThresholdB,proto3" json:"controlnet_threshold_b,omitempty"`
	Seed                              int32             `protobuf:"varint,22,opt,name=seed,proto3" json:"seed,omitempty"`
	Subseed                           int32             `protobuf:"varint,23,opt,name=subseed,proto3" json:"subseed,omitempty"`
	SubseedStrength                   int32             `protobuf:"varint,24,opt,name=subseed_strength,json=subseedStrength,proto3" json:"subseed_strength,omitempty"`
	SamplerIndex                      string            `protobuf:"bytes,25,opt,name=sampler_index,json=samplerIndex,proto3" json:"sampler_index,omitempty"`
	BatchSize                         int32             `protobuf:"varint,26,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	NIter                             int32             `protobuf:"varint,27,opt,name=n_iter,json=nIter,proto3" json:"n_iter,omitempty"`
	Steps                             int32             `protobuf:"varint,28,opt,name=steps,proto3" json:"steps,omitempty"`
	CfgScale                          int32             `protobuf:"varint,29,opt,name=cfg_scale,json=cfgScale,proto3" json:"cfg_scale,omitempty"`
	Width                             int32             `protobuf:"varint,30,opt,name=width,proto3" json:"width,omitempty"`
	Height                            int32             `protobuf:"varint,31,opt,name=height,proto3" json:"height,omitempty"`
	RestoreFaces                      bool              `protobuf:"varint,32,opt,name=restore_faces,json=restoreFaces,proto3" json:"restore_faces,omitempty"`
	IncludeInitImages                 bool              `protobuf:"varint,33,opt,name=include_init_images,json=includeInitImages,proto3" json:"include_init_images,omitempty"`
	OverrideSettings                  *OverrideSettings `protobuf:"bytes,34,opt,name=override_settings,json=overrideSettings,proto3" json:"override_settings,omitempty"`
	OverrideSettingsRestoreAfterwards bool              `protobuf:"varint,35,opt,name=override_settings_restore_afterwards,json=overrideSettingsRestoreAfterwards,proto3" json:"override_settings_restore_afterwards,omitempty"`
}

func (x *ControlnetImg2ImgReq) Reset() {
	*x = ControlnetImg2ImgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stable_diffusion_proxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlnetImg2ImgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlnetImg2ImgReq) ProtoMessage() {}

func (x *ControlnetImg2ImgReq) ProtoReflect() protoreflect.Message {
	mi := &file_stable_diffusion_proxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlnetImg2ImgReq.ProtoReflect.Descriptor instead.
func (*ControlnetImg2ImgReq) Descriptor() ([]byte, []int) {
	return file_stable_diffusion_proxy_proto_rawDescGZIP(), []int{1}
}

func (x *ControlnetImg2ImgReq) GetInitImages() []string {
	if x != nil {
		return x.InitImages
	}
	return nil
}

func (x *ControlnetImg2ImgReq) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *ControlnetImg2ImgReq) GetMaskBlur() int32 {
	if x != nil {
		return x.MaskBlur
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetInpaintingFill() int32 {
	if x != nil {
		return x.InpaintingFill
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetInpaintFullRes() bool {
	if x != nil {
		return x.InpaintFullRes
	}
	return false
}

func (x *ControlnetImg2ImgReq) GetInpaintFullResPadding() int32 {
	if x != nil {
		return x.InpaintFullResPadding
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetInpaintingMaskInvert() int32 {
	if x != nil {
		return x.InpaintingMaskInvert
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetResizeMode() int32 {
	if x != nil {
		return x.ResizeMode
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetDenoisingStrength() float64 {
	if x != nil {
		return x.DenoisingStrength
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *ControlnetImg2ImgReq) GetNegativePrompt() string {
	if x != nil {
		return x.NegativePrompt
	}
	return ""
}

func (x *ControlnetImg2ImgReq) GetControlnetInputImage() []string {
	if x != nil {
		return x.ControlnetInputImage
	}
	return nil
}

func (x *ControlnetImg2ImgReq) GetControlnetMask() []string {
	if x != nil {
		return x.ControlnetMask
	}
	return nil
}

func (x *ControlnetImg2ImgReq) GetControlnetModule() string {
	if x != nil {
		return x.ControlnetModule
	}
	return ""
}

func (x *ControlnetImg2ImgReq) GetControlnetModel() string {
	if x != nil {
		return x.ControlnetModel
	}
	return ""
}

func (x *ControlnetImg2ImgReq) GetControlnetWeight() float64 {
	if x != nil {
		return x.ControlnetWeight
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetControlnetResizeMode() string {
	if x != nil {
		return x.ControlnetResizeMode
	}
	return ""
}

func (x *ControlnetImg2ImgReq) GetControlnetLowvram() bool {
	if x != nil {
		return x.ControlnetLowvram
	}
	return false
}

func (x *ControlnetImg2ImgReq) GetControlnetProcessorRes() int32 {
	if x != nil {
		return x.ControlnetProcessorRes
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetControlnetThresholdA() int32 {
	if x != nil {
		return x.ControlnetThresholdA
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetControlnetThresholdB() int32 {
	if x != nil {
		return x.ControlnetThresholdB
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetSeed() int32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetSubseed() int32 {
	if x != nil {
		return x.Subseed
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetSubseedStrength() int32 {
	if x != nil {
		return x.SubseedStrength
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetSamplerIndex() string {
	if x != nil {
		return x.SamplerIndex
	}
	return ""
}

func (x *ControlnetImg2ImgReq) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetNIter() int32 {
	if x != nil {
		return x.NIter
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetSteps() int32 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetCfgScale() int32 {
	if x != nil {
		return x.CfgScale
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ControlnetImg2ImgReq) GetRestoreFaces() bool {
	if x != nil {
		return x.RestoreFaces
	}
	return false
}

func (x *ControlnetImg2ImgReq) GetIncludeInitImages() bool {
	if x != nil {
		return x.IncludeInitImages
	}
	return false
}

func (x *ControlnetImg2ImgReq) GetOverrideSettings() *OverrideSettings {
	if x != nil {
		return x.OverrideSettings
	}
	return nil
}

func (x *ControlnetImg2ImgReq) GetOverrideSettingsRestoreAfterwards() bool {
	if x != nil {
		return x.OverrideSettingsRestoreAfterwards
	}
	return false
}

type ControlnetImg2ImgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutImages []string `protobuf:"bytes,1,rep,name=out_images,json=outImages,proto3" json:"out_images,omitempty"` // 输出图片
}

func (x *ControlnetImg2ImgRsp) Reset() {
	*x = ControlnetImg2ImgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stable_diffusion_proxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlnetImg2ImgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlnetImg2ImgRsp) ProtoMessage() {}

func (x *ControlnetImg2ImgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stable_diffusion_proxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlnetImg2ImgRsp.ProtoReflect.Descriptor instead.
func (*ControlnetImg2ImgRsp) Descriptor() ([]byte, []int) {
	return file_stable_diffusion_proxy_proto_rawDescGZIP(), []int{2}
}

func (x *ControlnetImg2ImgRsp) GetOutImages() []string {
	if x != nil {
		return x.OutImages
	}
	return nil
}

type SdImg2ImgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitImages                        []string          `protobuf:"bytes,1,rep,name=init_images,json=initImages,proto3" json:"init_images,omitempty"`
	ResizeMode                        int32             `protobuf:"varint,2,opt,name=resize_mode,json=resizeMode,proto3" json:"resize_mode,omitempty"`
	DenoisingStrength                 float64           `protobuf:"fixed64,3,opt,name=denoising_strength,json=denoisingStrength,proto3" json:"denoising_strength,omitempty"`
	ImageCfgScale                     int32             `protobuf:"varint,4,opt,name=image_cfg_scale,json=imageCfgScale,proto3" json:"image_cfg_scale,omitempty"`
	Mask                              string            `protobuf:"bytes,5,opt,name=mask,proto3" json:"mask,omitempty"`
	MaskBlur                          int32             `protobuf:"varint,6,opt,name=mask_blur,json=maskBlur,proto3" json:"mask_blur,omitempty"`
	InpaintingFill                    int32             `protobuf:"varint,7,opt,name=inpainting_fill,json=inpaintingFill,proto3" json:"inpainting_fill,omitempty"`
	InpaintFullRes                    bool              `protobuf:"varint,8,opt,name=inpaint_full_res,json=inpaintFullRes,proto3" json:"inpaint_full_res,omitempty"`
	InpaintFullResPadding             int32             `protobuf:"varint,9,opt,name=inpaint_full_res_padding,json=inpaintFullResPadding,proto3" json:"inpaint_full_res_padding,omitempty"`
	InpaintingMaskInvert              int32             `protobuf:"varint,10,opt,name=inpainting_mask_invert,json=inpaintingMaskInvert,proto3" json:"inpainting_mask_invert,omitempty"`
	InitialNoiseMultiplier            int32             `protobuf:"varint,11,opt,name=initial_noise_multiplier,json=initialNoiseMultiplier,proto3" json:"initial_noise_multiplier,omitempty"`
	Prompt                            string            `protobuf:"bytes,12,opt,name=prompt,proto3" json:"prompt,omitempty"`
	Styles                            []string          `protobuf:"bytes,13,rep,name=styles,proto3" json:"styles,omitempty"`
	Seed                              int32             `protobuf:"varint,14,opt,name=seed,proto3" json:"seed,omitempty"`
	Subseed                           int32             `protobuf:"varint,15,opt,name=subseed,proto3" json:"subseed,omitempty"`
	SubseedStrength                   int32             `protobuf:"varint,16,opt,name=subseed_strength,json=subseedStrength,proto3" json:"subseed_strength,omitempty"`
	SeedResizeFromH                   int32             `protobuf:"varint,17,opt,name=seed_resize_from_h,json=seedResizeFromH,proto3" json:"seed_resize_from_h,omitempty"`
	SeedResizeFromW                   int32             `protobuf:"varint,18,opt,name=seed_resize_from_w,json=seedResizeFromW,proto3" json:"seed_resize_from_w,omitempty"`
	SamplerName                       string            `protobuf:"bytes,19,opt,name=sampler_name,json=samplerName,proto3" json:"sampler_name,omitempty"`
	BatchSize                         int32             `protobuf:"varint,20,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	NIter                             int32             `protobuf:"varint,21,opt,name=n_iter,json=nIter,proto3" json:"n_iter,omitempty"`
	Steps                             int32             `protobuf:"varint,22,opt,name=steps,proto3" json:"steps,omitempty"`
	CfgScale                          int32             `protobuf:"varint,23,opt,name=cfg_scale,json=cfgScale,proto3" json:"cfg_scale,omitempty"`
	Width                             int32             `protobuf:"varint,24,opt,name=width,proto3" json:"width,omitempty"`
	Height                            int32             `protobuf:"varint,25,opt,name=height,proto3" json:"height,omitempty"`
	RestoreFaces                      bool              `protobuf:"varint,26,opt,name=restore_faces,json=restoreFaces,proto3" json:"restore_faces,omitempty"`
	Tiling                            bool              `protobuf:"varint,27,opt,name=tiling,proto3" json:"tiling,omitempty"`
	NegativePrompt                    string            `protobuf:"bytes,28,opt,name=negative_prompt,json=negativePrompt,proto3" json:"negative_prompt,omitempty"`
	Eat                               int32             `protobuf:"varint,29,opt,name=eat,proto3" json:"eat,omitempty"`
	SChurn                            int32             `protobuf:"varint,30,opt,name=s_churn,json=sChurn,proto3" json:"s_churn,omitempty"`
	STmax                             int32             `protobuf:"varint,31,opt,name=s_tmax,json=sTmax,proto3" json:"s_tmax,omitempty"`
	STmin                             int32             `protobuf:"varint,32,opt,name=s_tmin,json=sTmin,proto3" json:"s_tmin,omitempty"`
	SNoise                            int32             `protobuf:"varint,33,opt,name=s_noise,json=sNoise,proto3" json:"s_noise,omitempty"`
	OverrideSettings                  *OverrideSettings `protobuf:"bytes,34,opt,name=override_settings,json=overrideSettings,proto3" json:"override_settings,omitempty"`
	OverrideSettingsRestoreAfterwards bool              `protobuf:"varint,35,opt,name=override_settings_restore_afterwards,json=overrideSettingsRestoreAfterwards,proto3" json:"override_settings_restore_afterwards,omitempty"`
	ScriptArgs                        []string          `protobuf:"bytes,36,rep,name=script_args,json=scriptArgs,proto3" json:"script_args,omitempty"`
	SamplerIndex                      string            `protobuf:"bytes,37,opt,name=sampler_index,json=samplerIndex,proto3" json:"sampler_index,omitempty"`
	IncludeInitImages                 bool              `protobuf:"varint,38,opt,name=include_init_images,json=includeInitImages,proto3" json:"include_init_images,omitempty"`
	ScriptName                        string            `protobuf:"bytes,39,opt,name=script_name,json=scriptName,proto3" json:"script_name,omitempty"`
}

func (x *SdImg2ImgReq) Reset() {
	*x = SdImg2ImgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stable_diffusion_proxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdImg2ImgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdImg2ImgReq) ProtoMessage() {}

func (x *SdImg2ImgReq) ProtoReflect() protoreflect.Message {
	mi := &file_stable_diffusion_proxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdImg2ImgReq.ProtoReflect.Descriptor instead.
func (*SdImg2ImgReq) Descriptor() ([]byte, []int) {
	return file_stable_diffusion_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *SdImg2ImgReq) GetInitImages() []string {
	if x != nil {
		return x.InitImages
	}
	return nil
}

func (x *SdImg2ImgReq) GetResizeMode() int32 {
	if x != nil {
		return x.ResizeMode
	}
	return 0
}

func (x *SdImg2ImgReq) GetDenoisingStrength() float64 {
	if x != nil {
		return x.DenoisingStrength
	}
	return 0
}

func (x *SdImg2ImgReq) GetImageCfgScale() int32 {
	if x != nil {
		return x.ImageCfgScale
	}
	return 0
}

func (x *SdImg2ImgReq) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *SdImg2ImgReq) GetMaskBlur() int32 {
	if x != nil {
		return x.MaskBlur
	}
	return 0
}

func (x *SdImg2ImgReq) GetInpaintingFill() int32 {
	if x != nil {
		return x.InpaintingFill
	}
	return 0
}

func (x *SdImg2ImgReq) GetInpaintFullRes() bool {
	if x != nil {
		return x.InpaintFullRes
	}
	return false
}

func (x *SdImg2ImgReq) GetInpaintFullResPadding() int32 {
	if x != nil {
		return x.InpaintFullResPadding
	}
	return 0
}

func (x *SdImg2ImgReq) GetInpaintingMaskInvert() int32 {
	if x != nil {
		return x.InpaintingMaskInvert
	}
	return 0
}

func (x *SdImg2ImgReq) GetInitialNoiseMultiplier() int32 {
	if x != nil {
		return x.InitialNoiseMultiplier
	}
	return 0
}

func (x *SdImg2ImgReq) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *SdImg2ImgReq) GetStyles() []string {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *SdImg2ImgReq) GetSeed() int32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *SdImg2ImgReq) GetSubseed() int32 {
	if x != nil {
		return x.Subseed
	}
	return 0
}

func (x *SdImg2ImgReq) GetSubseedStrength() int32 {
	if x != nil {
		return x.SubseedStrength
	}
	return 0
}

func (x *SdImg2ImgReq) GetSeedResizeFromH() int32 {
	if x != nil {
		return x.SeedResizeFromH
	}
	return 0
}

func (x *SdImg2ImgReq) GetSeedResizeFromW() int32 {
	if x != nil {
		return x.SeedResizeFromW
	}
	return 0
}

func (x *SdImg2ImgReq) GetSamplerName() string {
	if x != nil {
		return x.SamplerName
	}
	return ""
}

func (x *SdImg2ImgReq) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *SdImg2ImgReq) GetNIter() int32 {
	if x != nil {
		return x.NIter
	}
	return 0
}

func (x *SdImg2ImgReq) GetSteps() int32 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *SdImg2ImgReq) GetCfgScale() int32 {
	if x != nil {
		return x.CfgScale
	}
	return 0
}

func (x *SdImg2ImgReq) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SdImg2ImgReq) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SdImg2ImgReq) GetRestoreFaces() bool {
	if x != nil {
		return x.RestoreFaces
	}
	return false
}

func (x *SdImg2ImgReq) GetTiling() bool {
	if x != nil {
		return x.Tiling
	}
	return false
}

func (x *SdImg2ImgReq) GetNegativePrompt() string {
	if x != nil {
		return x.NegativePrompt
	}
	return ""
}

func (x *SdImg2ImgReq) GetEat() int32 {
	if x != nil {
		return x.Eat
	}
	return 0
}

func (x *SdImg2ImgReq) GetSChurn() int32 {
	if x != nil {
		return x.SChurn
	}
	return 0
}

func (x *SdImg2ImgReq) GetSTmax() int32 {
	if x != nil {
		return x.STmax
	}
	return 0
}

func (x *SdImg2ImgReq) GetSTmin() int32 {
	if x != nil {
		return x.STmin
	}
	return 0
}

func (x *SdImg2ImgReq) GetSNoise() int32 {
	if x != nil {
		return x.SNoise
	}
	return 0
}

func (x *SdImg2ImgReq) GetOverrideSettings() *OverrideSettings {
	if x != nil {
		return x.OverrideSettings
	}
	return nil
}

func (x *SdImg2ImgReq) GetOverrideSettingsRestoreAfterwards() bool {
	if x != nil {
		return x.OverrideSettingsRestoreAfterwards
	}
	return false
}

func (x *SdImg2ImgReq) GetScriptArgs() []string {
	if x != nil {
		return x.ScriptArgs
	}
	return nil
}

func (x *SdImg2ImgReq) GetSamplerIndex() string {
	if x != nil {
		return x.SamplerIndex
	}
	return ""
}

func (x *SdImg2ImgReq) GetIncludeInitImages() bool {
	if x != nil {
		return x.IncludeInitImages
	}
	return false
}

func (x *SdImg2ImgReq) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

type SdImg2ImgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdImg2ImgRsp) Reset() {
	*x = SdImg2ImgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stable_diffusion_proxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdImg2ImgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdImg2ImgRsp) ProtoMessage() {}

func (x *SdImg2ImgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stable_diffusion_proxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdImg2ImgRsp.ProtoReflect.Descriptor instead.
func (*SdImg2ImgRsp) Descriptor() ([]byte, []int) {
	return file_stable_diffusion_proxy_proto_rawDescGZIP(), []int{4}
}

var File_stable_diffusion_proxy_proto protoreflect.FileDescriptor

var file_stable_diffusion_proxy_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xba, 0x0b, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x49, 0x6d, 0x67, 0x32, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x62, 0x6c, 0x75,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x6c, 0x75,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x61,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e,
	0x70, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x69, 0x6e, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a,
	0x16, 0x69, 0x6e, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x69,
	0x6e, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x6e, 0x6f, 0x69, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x64, 0x65, 0x6e, 0x6f, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e,
	0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x77,
	0x76, 0x72, 0x61, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x4c, 0x6f, 0x77, 0x76, 0x72, 0x61, 0x6d, 0x12, 0x38, 0x0a,
	0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6e, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x12, 0x34, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x73, 0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6e, 0x49, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x66, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x66, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x53, 0x0a,
	0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x4f, 0x0a, 0x24, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x21, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65,
	0x74, 0x49, 0x6d, 0x67, 0x32, 0x49, 0x6d, 0x67, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x75, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x75, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x86, 0x0b, 0x0a, 0x0c, 0x53,
	0x64, 0x49, 0x6d, 0x67, 0x32, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x64, 0x65, 0x6e, 0x6f, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x65, 0x6e, 0x6f, 0x69,
	0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x66, 0x67, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x62, 0x6c, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x73,
	0x6b, 0x42, 0x6c, 0x75, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x61, 0x69, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x6e, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x6e, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x61, 0x69, 0x6e,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x70, 0x61,
	0x69, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x69, 0x6e, 0x70, 0x61,
	0x69, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x69, 0x6e, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x65,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x65,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x65, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x49, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x66, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x66, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x65, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x5f, 0x63, 0x68, 0x75, 0x72,
	0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x43, 0x68, 0x75, 0x72, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x5f, 0x74, 0x6d, 0x61, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x54, 0x6d, 0x61, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x5f, 0x74, 0x6d, 0x69, 0x6e,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x54, 0x6d, 0x69, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4f, 0x0a, 0x24, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x64, 0x49, 0x6d, 0x67, 0x32, 0x49, 0x6d, 0x67,
	0x52, 0x73, 0x70, 0x32, 0xc0, 0x02, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x74, 0x74, 0x70,
	0x12, 0xa2, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x49,
	0x6d, 0x67, 0x32, 0x49, 0x6d, 0x67, 0x12, 0x2a, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x49, 0x6d, 0x67, 0x32, 0x49, 0x6d, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x69, 0x66, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6e, 0x65, 0x74, 0x49, 0x6d, 0x67, 0x32, 0x49, 0x6d, 0x67, 0x52, 0x73, 0x70, 0x22, 0x35,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x67, 0x32, 0x69,
	0x6d, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x09, 0x53, 0x64, 0x49, 0x6d, 0x67, 0x32, 0x49,
	0x6d, 0x67, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x69, 0x66, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53, 0x64, 0x49, 0x6d, 0x67, 0x32,
	0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53, 0x64,
	0x49, 0x6d, 0x67, 0x32, 0x49, 0x6d, 0x67, 0x52, 0x73, 0x70, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x22, 0x1f, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69, 0x6d, 0x67, 0x32,
	0x69, 0x6d, 0x67, 0x3a, 0x01, 0x2a, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6b, 0x61, 0x74, 0x73, 0x75, 0x6b, 0x69, 0x73, 0x75, 0x6e,
	0x32, 0x30, 0x32, 0x30, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x2f,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stable_diffusion_proxy_proto_rawDescOnce sync.Once
	file_stable_diffusion_proxy_proto_rawDescData = file_stable_diffusion_proxy_proto_rawDesc
)

func file_stable_diffusion_proxy_proto_rawDescGZIP() []byte {
	file_stable_diffusion_proxy_proto_rawDescOnce.Do(func() {
		file_stable_diffusion_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_stable_diffusion_proxy_proto_rawDescData)
	})
	return file_stable_diffusion_proxy_proto_rawDescData
}

var file_stable_diffusion_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_stable_diffusion_proxy_proto_goTypes = []interface{}{
	(*OverrideSettings)(nil),     // 0: stablediffusionproxy.OverrideSettings
	(*ControlnetImg2ImgReq)(nil), // 1: stablediffusionproxy.ControlnetImg2ImgReq
	(*ControlnetImg2ImgRsp)(nil), // 2: stablediffusionproxy.ControlnetImg2ImgRsp
	(*SdImg2ImgReq)(nil),         // 3: stablediffusionproxy.SdImg2ImgReq
	(*SdImg2ImgRsp)(nil),         // 4: stablediffusionproxy.SdImg2ImgRsp
}
var file_stable_diffusion_proxy_proto_depIdxs = []int32{
	0, // 0: stablediffusionproxy.ControlnetImg2ImgReq.override_settings:type_name -> stablediffusionproxy.OverrideSettings
	0, // 1: stablediffusionproxy.SdImg2ImgReq.override_settings:type_name -> stablediffusionproxy.OverrideSettings
	1, // 2: stablediffusionproxy.StableDiffusionProxyHttp.ControlnetImg2Img:input_type -> stablediffusionproxy.ControlnetImg2ImgReq
	3, // 3: stablediffusionproxy.StableDiffusionProxyHttp.SdImg2Img:input_type -> stablediffusionproxy.SdImg2ImgReq
	2, // 4: stablediffusionproxy.StableDiffusionProxyHttp.ControlnetImg2Img:output_type -> stablediffusionproxy.ControlnetImg2ImgRsp
	4, // 5: stablediffusionproxy.StableDiffusionProxyHttp.SdImg2Img:output_type -> stablediffusionproxy.SdImg2ImgRsp
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_stable_diffusion_proxy_proto_init() }
func file_stable_diffusion_proxy_proto_init() {
	if File_stable_diffusion_proxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stable_diffusion_proxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stable_diffusion_proxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlnetImg2ImgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stable_diffusion_proxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlnetImg2ImgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stable_diffusion_proxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdImg2ImgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stable_diffusion_proxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdImg2ImgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stable_diffusion_proxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stable_diffusion_proxy_proto_goTypes,
		DependencyIndexes: file_stable_diffusion_proxy_proto_depIdxs,
		MessageInfos:      file_stable_diffusion_proxy_proto_msgTypes,
	}.Build()
	File_stable_diffusion_proxy_proto = out.File
	file_stable_diffusion_proxy_proto_rawDesc = nil
	file_stable_diffusion_proxy_proto_goTypes = nil
	file_stable_diffusion_proxy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StableDiffusionProxyHttpClient is the client API for StableDiffusionProxyHttp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StableDiffusionProxyHttpClient interface {
	ControlnetImg2Img(ctx context.Context, in *ControlnetImg2ImgReq, opts ...grpc.CallOption) (*ControlnetImg2ImgRsp, error)
	SdImg2Img(ctx context.Context, in *SdImg2ImgReq, opts ...grpc.CallOption) (*SdImg2ImgRsp, error)
}

type stableDiffusionProxyHttpClient struct {
	cc grpc.ClientConnInterface
}

func NewStableDiffusionProxyHttpClient(cc grpc.ClientConnInterface) StableDiffusionProxyHttpClient {
	return &stableDiffusionProxyHttpClient{cc}
}

func (c *stableDiffusionProxyHttpClient) ControlnetImg2Img(ctx context.Context, in *ControlnetImg2ImgReq, opts ...grpc.CallOption) (*ControlnetImg2ImgRsp, error) {
	out := new(ControlnetImg2ImgRsp)
	err := c.cc.Invoke(ctx, "/stablediffusionproxy.StableDiffusionProxyHttp/ControlnetImg2Img", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stableDiffusionProxyHttpClient) SdImg2Img(ctx context.Context, in *SdImg2ImgReq, opts ...grpc.CallOption) (*SdImg2ImgRsp, error) {
	out := new(SdImg2ImgRsp)
	err := c.cc.Invoke(ctx, "/stablediffusionproxy.StableDiffusionProxyHttp/SdImg2Img", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StableDiffusionProxyHttpServer is the server API for StableDiffusionProxyHttp service.
type StableDiffusionProxyHttpServer interface {
	ControlnetImg2Img(context.Context, *ControlnetImg2ImgReq) (*ControlnetImg2ImgRsp, error)
	SdImg2Img(context.Context, *SdImg2ImgReq) (*SdImg2ImgRsp, error)
}

// UnimplementedStableDiffusionProxyHttpServer can be embedded to have forward compatible implementations.
type UnimplementedStableDiffusionProxyHttpServer struct {
}

func (*UnimplementedStableDiffusionProxyHttpServer) ControlnetImg2Img(context.Context, *ControlnetImg2ImgReq) (*ControlnetImg2ImgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlnetImg2Img not implemented")
}
func (*UnimplementedStableDiffusionProxyHttpServer) SdImg2Img(context.Context, *SdImg2ImgReq) (*SdImg2ImgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SdImg2Img not implemented")
}

func RegisterStableDiffusionProxyHttpServer(s *grpc.Server, srv StableDiffusionProxyHttpServer) {
	s.RegisterService(&_StableDiffusionProxyHttp_serviceDesc, srv)
}

func _StableDiffusionProxyHttp_ControlnetImg2Img_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlnetImg2ImgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StableDiffusionProxyHttpServer).ControlnetImg2Img(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stablediffusionproxy.StableDiffusionProxyHttp/ControlnetImg2Img",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StableDiffusionProxyHttpServer).ControlnetImg2Img(ctx, req.(*ControlnetImg2ImgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StableDiffusionProxyHttp_SdImg2Img_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdImg2ImgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StableDiffusionProxyHttpServer).SdImg2Img(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stablediffusionproxy.StableDiffusionProxyHttp/SdImg2Img",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StableDiffusionProxyHttpServer).SdImg2Img(ctx, req.(*SdImg2ImgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StableDiffusionProxyHttp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stablediffusionproxy.StableDiffusionProxyHttp",
	HandlerType: (*StableDiffusionProxyHttpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ControlnetImg2Img",
			Handler:    _StableDiffusionProxyHttp_ControlnetImg2Img_Handler,
		},
		{
			MethodName: "SdImg2Img",
			Handler:    _StableDiffusionProxyHttp_SdImg2Img_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stable_diffusion_proxy.proto",
}
